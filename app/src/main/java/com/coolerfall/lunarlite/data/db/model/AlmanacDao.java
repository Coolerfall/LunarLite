package com.coolerfall.lunarlite.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coolerfall.lunarlite.data.db.model.Almanac;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "almanac".
*/
public class AlmanacDao extends AbstractDao<Almanac, Void> {

    public static final String TABLENAME = "almanac";

    /**
     * Properties of entity Almanac.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Wielding = new Property(0, Integer.class, "wielding", false, "wielding");
        public final static Property Hseb = new Property(1, Integer.class, "hseb", false, "hseb");
        public final static Property Dread = new Property(2, String.class, "dread", false, "dread");
        public final static Property Suit = new Property(3, String.class, "suit", false, "suit");
    };


    public AlmanacDao(DaoConfig config) {
        super(config);
    }
    
    public AlmanacDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"almanac\" (" + //
                "\"wielding\" INTEGER," + // 0: wielding
                "\"hseb\" INTEGER," + // 1: hseb
                "\"dread\" TEXT," + // 2: dread
                "\"suit\" TEXT);"); // 3: suit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"almanac\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Almanac entity) {
        stmt.clearBindings();
 
        Integer wielding = entity.getWielding();
        if (wielding != null) {
            stmt.bindLong(1, wielding);
        }
 
        Integer hseb = entity.getHseb();
        if (hseb != null) {
            stmt.bindLong(2, hseb);
        }
 
        String dread = entity.getDread();
        if (dread != null) {
            stmt.bindString(3, dread);
        }
 
        String suit = entity.getSuit();
        if (suit != null) {
            stmt.bindString(4, suit);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Almanac readEntity(Cursor cursor, int offset) {
        Almanac entity = new Almanac( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // wielding
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // hseb
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dread
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // suit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Almanac entity, int offset) {
        entity.setWielding(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setHseb(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDread(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSuit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Almanac entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Almanac entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
